// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package adapter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WalManagerClient is the client API for WalManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalManagerClient interface {
	ArchiveWal(ctx context.Context, in *ArchiveWalRequest, opts ...grpc.CallOption) (*ArchiveWalResult, error)
	RestoreWal(ctx context.Context, in *RestoreWalRequest, opts ...grpc.CallOption) (*RestoreWalResult, error)
}

type walManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewWalManagerClient(cc grpc.ClientConnInterface) WalManagerClient {
	return &walManagerClient{cc}
}

func (c *walManagerClient) ArchiveWal(ctx context.Context, in *ArchiveWalRequest, opts ...grpc.CallOption) (*ArchiveWalResult, error) {
	out := new(ArchiveWalResult)
	err := c.cc.Invoke(ctx, "/adapter.v1.WalManager/ArchiveWal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walManagerClient) RestoreWal(ctx context.Context, in *RestoreWalRequest, opts ...grpc.CallOption) (*RestoreWalResult, error) {
	out := new(RestoreWalResult)
	err := c.cc.Invoke(ctx, "/adapter.v1.WalManager/RestoreWal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalManagerServer is the server API for WalManager service.
// All implementations must embed UnimplementedWalManagerServer
// for forward compatibility
type WalManagerServer interface {
	ArchiveWal(context.Context, *ArchiveWalRequest) (*ArchiveWalResult, error)
	RestoreWal(context.Context, *RestoreWalRequest) (*RestoreWalResult, error)
	mustEmbedUnimplementedWalManagerServer()
}

// UnimplementedWalManagerServer must be embedded to have forward compatible implementations.
type UnimplementedWalManagerServer struct {
}

func (UnimplementedWalManagerServer) ArchiveWal(context.Context, *ArchiveWalRequest) (*ArchiveWalResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveWal not implemented")
}
func (UnimplementedWalManagerServer) RestoreWal(context.Context, *RestoreWalRequest) (*RestoreWalResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreWal not implemented")
}
func (UnimplementedWalManagerServer) mustEmbedUnimplementedWalManagerServer() {}

// UnsafeWalManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalManagerServer will
// result in compilation errors.
type UnsafeWalManagerServer interface {
	mustEmbedUnimplementedWalManagerServer()
}

func RegisterWalManagerServer(s grpc.ServiceRegistrar, srv WalManagerServer) {
	s.RegisterService(&WalManager_ServiceDesc, srv)
}

func _WalManager_ArchiveWal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveWalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalManagerServer).ArchiveWal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter.v1.WalManager/ArchiveWal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalManagerServer).ArchiveWal(ctx, req.(*ArchiveWalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalManager_RestoreWal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreWalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalManagerServer).RestoreWal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter.v1.WalManager/RestoreWal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalManagerServer).RestoreWal(ctx, req.(*RestoreWalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalManager_ServiceDesc is the grpc.ServiceDesc for WalManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "adapter.v1.WalManager",
	HandlerType: (*WalManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ArchiveWal",
			Handler:    _WalManager_ArchiveWal_Handler,
		},
		{
			MethodName: "RestoreWal",
			Handler:    _WalManager_RestoreWal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adapter/adapter.proto",
}
